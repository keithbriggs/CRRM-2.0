# Keith Briggs 2025-08-26

"""
MCS look-up tables from 3GPP TS 38.214 version 16.2.0 Release 16:
https://www.etsi.org/deliver/etsi_ts/138200_138299/138214/16.02.00_60/ts_138214v160200p.pdf

Tables 5.1.3.1-1, 5.1.3.1-2, 5.1.3.1-3 on pages 27-29. 

It works like this: suppose we use table 1 and MCS 28. Then we send 64k bits on one subcarrier in one second. With a subcarrier spacing of 15kHz, there are 64k/15k bits sent per second per Hz. This is 4.26, but the table has 5.5547 because it includes the extra coding gain.
"""

from numpy import array as np_array

# Table 5.1.3.1-1: MCS index table 1 for PDSCH
MCS_index_table_1 = np_array(
    [
        [ 0, 2, 120, 0.2344],
        [ 1, 2, 157, 0.3066],
        [ 2, 2, 193, 0.3770],
        [ 3, 2, 251, 0.4902],
        [ 4, 2, 308, 0.6016],
        [ 5, 2, 379, 0.7402],
        [ 6, 2, 449, 0.8770],
        [ 7, 2, 526, 1.0273],
        [ 8, 2, 602, 1.1758],
        [ 9, 2, 679, 1.3262],
        [10, 4, 340, 1.3281],
        [11, 4, 378, 1.4766],
        [12, 4, 434, 1.6953],
        [13, 4, 490, 1.9141],
        [14, 4, 553, 2.1602],
        [15, 4, 616, 2.4063],
        [16, 4, 658, 2.5703],
        [17, 6, 438, 2.5664],
        [18, 6, 466, 2.7305],
        [19, 6, 517, 3.0293],
        [20, 6, 567, 3.3223],
        [21, 6, 616, 3.6094],
        [22, 6, 666, 3.9023],
        [23, 6, 719, 4.2129],
        [24, 6, 772, 4.5234],
        [25, 6, 822, 4.8164],
        [26, 6, 873, 5.1152],
        [27, 6, 910, 5.3320],
        [28, 6, 948, 5.5547],
    ]
)

# Table 5.1.3.1-2: MCS index table 2 for PDSCH
MCS_index_table_2 = np_array(
    [
        [ 0, 2, 120, 0.2344],
        [ 1, 2, 193, 0.3770],
        [ 2, 2, 308, 0.6016],
        [ 3, 2, 449, 0.8770],
        [ 4, 2, 602, 1.1758],
        [ 5, 4, 378, 1.4766],
        [ 6, 4, 434, 1.6953],
        [ 7, 4, 490, 1.9141],
        [ 8, 4, 553, 2.1602],
        [ 9, 4, 616, 2.4063],
        [10, 4, 658, 2.5703],
        [11, 6, 466, 2.7305],
        [12, 6, 517, 3.0293],
        [13, 6, 567, 3.3223],
        [14, 6, 616, 3.6094],
        [15, 6, 666, 3.9023],
        [16, 6, 719, 4.2129],
        [17, 6, 772, 4.5234],
        [18, 6, 822, 4.8164],
        [19, 6, 873, 5.1152],
        [20, 8, 682.5, 5.3320],
        [21, 8, 711, 5.5547],
        [22, 8, 754, 5.8906],
        [23, 8, 797, 6.2266],
        [24, 8, 841, 6.5703],
        [25, 8, 885, 6.9141],
        [26, 8, 916.5, 7.1602],
        [27, 8, 948, 7.4063],
        [28, 8, 948, 7.4063],  # repeat of line 27, added to simplify indexing
    ]
)

# Table 5.1.3.1-3: MCS index table 3 for PDSCH
MCS_index_table_3 = np_array(
    [
        [ 0, 2,  30, 0.0586],
        [ 1, 2,  40, 0.0781],
        [ 2, 2,  50, 0.0977],
        [ 3, 2,  64, 0.1250],
        [ 4, 2,  78, 0.1523],
        [ 5, 2,  99, 0.1934],
        [ 6, 2, 120, 0.2344],
        [ 7, 2, 157, 0.3066],
        [ 8, 2, 193, 0.3770],
        [ 9, 2, 251, 0.4902],
        [10, 2, 308, 0.6016],
        [11, 2, 379, 0.7402],
        [12, 2, 449, 0.8770],
        [13, 2, 526, 1.0273],
        [14, 2, 602, 1.1758],
        [15, 4, 340, 1.3281],
        [16, 4, 378, 1.4766],
        [17, 4, 434, 1.6953],
        [18, 4, 490, 1.9141],
        [19, 4, 553, 2.1602],
        [20, 4, 616, 2.4063],
        [21, 6, 438, 2.5664],
        [22, 6, 466, 2.7305],
        [23, 6, 517, 3.0293],
        [24, 6, 567, 3.3223],
        [25, 6, 616, 3.6094],
        [26, 6, 666, 3.9023],
        [27, 6, 719, 4.2129],
        [28, 6, 772, 4.5234],
    ]
)

MCS_index_tables = {
    1: MCS_index_table_1,
    2: MCS_index_table_2,
    3: MCS_index_table_3,
}
